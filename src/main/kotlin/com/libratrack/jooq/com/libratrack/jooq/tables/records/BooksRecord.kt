/*
 * This file is generated by jOOQ.
 */
package com.libratrack.jooq.tables.records


import com.libratrack.jooq.tables.Books

import java.math.BigDecimal

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BooksRecord() : UpdatableRecordImpl<BooksRecord>(Books.BOOKS), Record4<Int?, String?, BigDecimal?, String?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var title: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var price: BigDecimal?
        set(value): Unit = set(2, value)
        get(): BigDecimal? = get(2) as BigDecimal?

    open var status: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, String?, BigDecimal?, String?> = super.fieldsRow() as Row4<Int?, String?, BigDecimal?, String?>
    override fun valuesRow(): Row4<Int?, String?, BigDecimal?, String?> = super.valuesRow() as Row4<Int?, String?, BigDecimal?, String?>
    override fun field1(): Field<Int?> = Books.BOOKS.ID
    override fun field2(): Field<String?> = Books.BOOKS.TITLE
    override fun field3(): Field<BigDecimal?> = Books.BOOKS.PRICE
    override fun field4(): Field<String?> = Books.BOOKS.STATUS
    override fun component1(): Int? = id
    override fun component2(): String? = title
    override fun component3(): BigDecimal? = price
    override fun component4(): String? = status
    override fun value1(): Int? = id
    override fun value2(): String? = title
    override fun value3(): BigDecimal? = price
    override fun value4(): String? = status

    override fun value1(value: Int?): BooksRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): BooksRecord {
        set(1, value)
        return this
    }

    override fun value3(value: BigDecimal?): BooksRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): BooksRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: BigDecimal?, value4: String?): BooksRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    constructor(id: Int? = null, title: String? = null, price: BigDecimal? = null, status: String? = null): this() {
        this.id = id
        this.title = title
        this.price = price
        this.status = status
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    constructor(value: com.libratrack.jooq.tables.pojos.Books?): this() {
        if (value != null) {
            this.id = value.id
            this.title = value.title
            this.price = value.price
            this.status = value.status
            resetChangedOnNotNull()
        }
    }
}
