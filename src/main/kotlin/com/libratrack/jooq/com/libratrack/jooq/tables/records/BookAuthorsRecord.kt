/*
 * This file is generated by jOOQ.
 */
package com.libratrack.jooq.tables.records


import com.libratrack.jooq.tables.BookAuthors

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookAuthorsRecord() : UpdatableRecordImpl<BookAuthorsRecord>(BookAuthors.BOOK_AUTHORS), Record2<Int?, Int?> {

    open var bookId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var authorId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, Int?> = super.fieldsRow() as Row2<Int?, Int?>
    override fun valuesRow(): Row2<Int?, Int?> = super.valuesRow() as Row2<Int?, Int?>
    override fun field1(): Field<Int?> = BookAuthors.BOOK_AUTHORS.BOOK_ID
    override fun field2(): Field<Int?> = BookAuthors.BOOK_AUTHORS.AUTHOR_ID
    override fun component1(): Int? = bookId
    override fun component2(): Int? = authorId
    override fun value1(): Int? = bookId
    override fun value2(): Int? = authorId

    override fun value1(value: Int?): BookAuthorsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): BookAuthorsRecord {
        set(1, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?): BookAuthorsRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised BookAuthorsRecord
     */
    constructor(bookId: Int? = null, authorId: Int? = null): this() {
        this.bookId = bookId
        this.authorId = authorId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookAuthorsRecord
     */
    constructor(value: com.libratrack.jooq.tables.pojos.BookAuthors?): this() {
        if (value != null) {
            this.bookId = value.bookId
            this.authorId = value.authorId
            resetChangedOnNotNull()
        }
    }
}
