/*
 * This file is generated by jOOQ.
 */
package com.libratrack.jooq.tables.records


import com.libratrack.jooq.tables.Authors

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AuthorsRecord() : UpdatableRecordImpl<AuthorsRecord>(Authors.AUTHORS), Record3<Int?, String?, LocalDate?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var birthDate: LocalDate?
        set(value): Unit = set(2, value)
        get(): LocalDate? = get(2) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, String?, LocalDate?> = super.fieldsRow() as Row3<Int?, String?, LocalDate?>
    override fun valuesRow(): Row3<Int?, String?, LocalDate?> = super.valuesRow() as Row3<Int?, String?, LocalDate?>
    override fun field1(): Field<Int?> = Authors.AUTHORS.ID
    override fun field2(): Field<String?> = Authors.AUTHORS.NAME
    override fun field3(): Field<LocalDate?> = Authors.AUTHORS.BIRTH_DATE
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): LocalDate? = birthDate
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): LocalDate? = birthDate

    override fun value1(value: Int?): AuthorsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): AuthorsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: LocalDate?): AuthorsRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: LocalDate?): AuthorsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised AuthorsRecord
     */
    constructor(id: Int? = null, name: String? = null, birthDate: LocalDate? = null): this() {
        this.id = id
        this.name = name
        this.birthDate = birthDate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised AuthorsRecord
     */
    constructor(value: com.libratrack.jooq.tables.pojos.Authors?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.birthDate = value.birthDate
            resetChangedOnNotNull()
        }
    }
}
