/*
 * This file is generated by jOOQ.
 */
package com.libratrack.jooq.keys


import com.libratrack.jooq.tables.Authors
import com.libratrack.jooq.tables.BookAuthors
import com.libratrack.jooq.tables.Books
import com.libratrack.jooq.tables.FlywaySchemaHistory
import com.libratrack.jooq.tables.records.AuthorsRecord
import com.libratrack.jooq.tables.records.BookAuthorsRecord
import com.libratrack.jooq.tables.records.BooksRecord
import com.libratrack.jooq.tables.records.FlywaySchemaHistoryRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val AUTHORS_PKEY: UniqueKey<AuthorsRecord> = Internal.createUniqueKey(Authors.AUTHORS, DSL.name("authors_pkey"), arrayOf(Authors.AUTHORS.ID), true)
val BOOK_AUTHORS_PKEY: UniqueKey<BookAuthorsRecord> = Internal.createUniqueKey(BookAuthors.BOOK_AUTHORS, DSL.name("book_authors_pkey"), arrayOf(BookAuthors.BOOK_AUTHORS.BOOK_ID, BookAuthors.BOOK_AUTHORS.AUTHOR_ID), true)
val BOOKS_PKEY: UniqueKey<BooksRecord> = Internal.createUniqueKey(Books.BOOKS, DSL.name("books_pkey"), arrayOf(Books.BOOKS.ID), true)
val FLYWAY_SCHEMA_HISTORY_PK: UniqueKey<FlywaySchemaHistoryRecord> = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), arrayOf(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val BOOK_AUTHORS__BOOK_AUTHORS_AUTHOR_ID_FKEY: ForeignKey<BookAuthorsRecord, AuthorsRecord> = Internal.createForeignKey(BookAuthors.BOOK_AUTHORS, DSL.name("book_authors_author_id_fkey"), arrayOf(BookAuthors.BOOK_AUTHORS.AUTHOR_ID), com.libratrack.jooq.keys.AUTHORS_PKEY, arrayOf(Authors.AUTHORS.ID), true)
val BOOK_AUTHORS__BOOK_AUTHORS_BOOK_ID_FKEY: ForeignKey<BookAuthorsRecord, BooksRecord> = Internal.createForeignKey(BookAuthors.BOOK_AUTHORS, DSL.name("book_authors_book_id_fkey"), arrayOf(BookAuthors.BOOK_AUTHORS.BOOK_ID), com.libratrack.jooq.keys.BOOKS_PKEY, arrayOf(Books.BOOKS.ID), true)
